vim.opt.termguicolors = false

---@param index number
---@return number
local function get_color(index)
  assert(index >= 0 and index < 256, "index must be between 0 and 255")
  assert(tonumber(vim.api.nvim_eval("&t_Co")) >= 16, "t_Co must be at least 16")

  return index
end

local colors = {
  black = get_color(0),
  red = get_color(1),
  green = get_color(2),
  yellow = get_color(3),
  blue = get_color(4),
  magenta = get_color(5),
  cyan = get_color(6),
  white = get_color(7),
  bright_black = get_color(8),
  bright_red = get_color(9),
  bright_green = get_color(10),
  bright_yellow = get_color(11),
  bright_blue = get_color(12),
  bright_magenta = get_color(13),
  bright_cyan = get_color(14),
  bright_white = get_color(15),
}

local semantic_colors = {
  black = colors.black,
  red = colors.bright_red,
  green = colors.bright_green,
  yellow = colors.bright_yellow,
  blue = colors.bright_blue,
  magenta = colors.bright_magenta,
  cyan = colors.bright_cyan,
  white = colors.bright_white,

  primary = colors.bright_white,
  secondary = colors.white,
  disabled = colors.bright_black,

  bg_highlight = colors.bright_black,

  accent_primary = colors.bright_blue,
  accent_secondary = colors.bright_yellow,

  error = colors.bright_red,
  warning = colors.bright_yellow,
  hint = colors.bright_cyan,
  info = colors.bright_blue,
  success = colors.bright_green,

  added = colors.bright_green,
  changed = colors.bright_cyan,
  removed = colors.bright_red,
}

local groups = {
  ColorColumn = { link = "CursorLine" },
  Conceal = { ctermfg = semantic_colors.disabled },
  CurSearch = { ctermfg = semantic_colors.black, ctermbg = semantic_colors.accent_secondary },
  CursorColumn = { link = "CursorLine" },
  CursorLine = { ctermbg = semantic_colors.bg_highlight },
  CursorLineFold = { link = "FoldColumn" },
  CursorLineNr = { ctermfg = semantic_colors.primary },
  CursorLineSign = { link = "SignColumn" },
  DiffAdd = { ctermfg = semantic_colors.black, ctermbg = semantic_colors.added },
  DiffChange = { ctermfg = semantic_colors.white, ctermbg = semantic_colors.disabled },
  DiffDelete = { ctermfg = semantic_colors.black, ctermbg = semantic_colors.removed },
  DiffText = { ctermfg = semantic_colors.black, ctermbg = semantic_colors.changed },
  Directory = { ctermfg = semantic_colors.accent_primary },
  EndOfBuffer = { link = "NonText" },
  ErrorMsg = { ctermfg = semantic_colors.error },
  FloatBorder = { link = "NormalFloat" },
  FloatFooter = { link = "FloatTitle" },
  FloatShadow = { ctermbg = semantic_colors.black },
  FloatShadowThrough = { link = "FloatShadow" },
  FloatTitle = { link = "Title" },
  FoldColumn = { link = "SignColumn" },
  Folded = { ctermfg = semantic_colors.secondary, ctermbg = semantic_colors.disabled },
  IncSearch = { link = "CurSearch" },
  LineNr = { ctermfg = semantic_colors.secondary },
  LineNrAbove = { link = "LineNr" },
  LineNrBelow = { link = "LineNr" },
  MatchParen = { ctermfg = semantic_colors.accent_primary, bold = true },
  ModeMsg = { ctermfg = semantic_colors.accent_primary },
  MoreMsg = { ctermfg = semantic_colors.hint },
  MsgArea = { link = "NONE" },
  MsgSeparator = { link = "StatusLine" },
  NonText = { ctermfg = semantic_colors.disabled },
  Normal = {},
  NormalFloat = {},
  NormalNC = { link = "NONE" },
  Pmenu = { ctermfg = semantic_colors.secondary, ctermbg = semantic_colors.black },
  PmenuExtra = { link = "Pmenu" },
  PmenuExtraSel = { link = "PmenuSel" },
  PmenuKind = { link = "Pmenu" },
  PmenuKindSel = { link = "PmenuSel" },
  PmenuMatch = { link = "Pmenu" },
  PmenuMatchSel = { link = "PmenuSel" },
  PmenuSbar = { link = "Pmenu" },
  PmenuSel = { ctermfg = semantic_colors.primary, bold = true },
  PmenuThumb = { ctermbg = semantic_colors.disabled },
  Question = { ctermfg = semantic_colors.accent_primary },
  QuickFixLine = { ctermfg = semantic_colors.accent_primary, ctermbg = semantic_colors.disabled },
  Search = { ctermfg = semantic_colors.black, ctermbg = semantic_colors.accent_primary },
  SignColumn = { ctermfg = semantic_colors.secondary },
  SnippetTabstop = { link = "Visual" },
  SpecialKey = { ctermfg = semantic_colors.error },
  SpellBad = { ctermfg = semantic_colors.error, undercurl = true },
  SpellCap = { ctermfg = semantic_colors.warning, undercurl = true },
  SpellLocal = { ctermfg = semantic_colors.info, undercurl = true },
  SpellRare = { ctermfg = semantic_colors.hint, undercurl = true },
  StatusLine = { link = "Normal" },
  StatusLineNC = { link = "Normal" },
  StatusLineTerm = { link = "StatusLine" },
  StatusLineTermNC = { link = "StatusLineNC" },
  Substitute = { link = "Search" },
  TabLine = { link = "StatusLineNC" },
  TabLineFill = { link = "TabLine" },
  Title = { ctermfg = semantic_colors.accent_primary, bold = true },
  VertSplit = { link = "WinSeparator" },
  Visual = { link = "CursorLine" },
  VisualNOS = { link = "Visual" },
  WarningMsg = { ctermfg = semantic_colors.warning },
  Whitespace = { link = "NonText" },
  WildMenu = { link = "PmenuSel" },
  WinBar = { link = "StatusLine" },
  WinBarNC = { link = "StatusLineNC" },
  WinSeparator = { link = "Normal" },

  -- Syntax
  Comment = { ctermfg = semantic_colors.secondary, italic = true },

  Constant = { ctermfg = semantic_colors.yellow },
  String = { ctermfg = semantic_colors.green },
  Character = { link = "String" },
  Number = { link = "Constant" },
  Boolean = { link = "Constant" },
  Float = { link = "Number" },

  Identifier = { ctermfg = semantic_colors.primary },
  Function = { ctermfg = semantic_colors.accent_primary },

  Statement = { ctermfg = colors.magenta },
  Conditional = { link = "Statement" },
  Repeat = { link = "Statement" },
  Label = { link = "Statement" },
  Operator = { link = "Statement" },
  Keyword = { link = "Statement" },
  Exception = { link = "Statement" },

  PreProc = { ctermfg = semantic_colors.cyan },
  Include = { link = "PreProc" },
  Define = { link = "PreProc" },
  Macro = { link = "PreProc" },
  PreCondit = { link = "PreProc" },

  Type = { ctermfg = colors.bright_blue },
  Structure = { link = "Type" },
  StorageClass = { link = "Type" },
  Typedef = { link = "Type" },

  Special = { ctermfg = semantic_colors.accent_primary, bold = true },
  Tag = { link = "Special" },
  SpecialChar = { link = "Special" },
  Delimiter = { link = "Special" },
  SpecialComment = { link = "Special" },
  Debug = { link = "Special" },

  Error = { ctermfg = semantic_colors.error },

  Todo = { ctermfg = colors.black, ctermbg = colors.bright_yellow },

  Added = { ctermfg = semantic_colors.added },
  Changed = { ctermfg = semantic_colors.changed },
  Removed = { ctermfg = semantic_colors.removed },

  -- Diagnostic
  DiagnosticError = { ctermfg = semantic_colors.error },
  DiagnosticWarn = { ctermfg = semantic_colors.warning },
  DiagnosticInfo = { ctermfg = semantic_colors.info },
  DiagnosticHint = { ctermfg = semantic_colors.hint },
  DiagnosticOk = { ctermfg = semantic_colors.success },
  DiagnosticUnderlineError = { ctermfg = semantic_colors.error, underline = true },
  DiagnosticUnderlineWarn = { ctermfg = semantic_colors.warning, underline = true },
  DiagnosticUnderlineInfo = { ctermfg = semantic_colors.info, underline = true },
  DiagnosticUnderlineHint = { ctermfg = semantic_colors.hint, underline = true },
  DiagnosticUnderlineOk = { ctermfg = semantic_colors.success, underline = true },
  DiagnosticDeprecated = { ctermfg = semantic_colors.error, strikethrough = true },

  -- Treesitter
  ["@variable"] = { link = "Identifier" },
  ["@variable.builtin"] = { ctermfg = semantic_colors.red },
  -- ["@variable.member"] = {},
  ["@variable.parameter"] = { ctermfg = semantic_colors.yellow },
  ["@variable.parameter.builtin"] = { link = "@variable.parameter" },

  ["@constant"] = { link = "Constant" },
  ["@constant.builtin"] = { ctermfg = semantic_colors.red },
  ["@constant.macro"] = { link = "Define" },

  ["@module"] = { link = "Include" },
  ["@module.builtin"] = { ctermfg = semantic_colors.red },

  ["@label"] = { link = "Label" },

  ["@string"] = { link = "String" },
  ["@string.documentation"] = { link = "@comment.documentation" },
  ["@string.regexp"] = { ctermfg = semantic_colors.yellow },
  -- ["@string.escape"] = {},
  -- ["@string.special"] = {},
  -- ["@string.special.symbol"] = {},
  -- ["@string.special.url"] = {},
  -- ["@string.special.path"] = {},

  ["@character"] = { link = "Character" },
  ["@character.special"] = { link = "SpecialChar" },

  ["@boolean"] = { link = "Boolean" },

  ["@number"] = { link = "Number" },
  ["@number.float"] = { link = "Float" },

  ["@type"] = { link = "Type" },
  ["@type.builtin"] = { ctermfg = semantic_colors.red },
  ["@type.definition"] = { link = "Typedef" },

  ["@attribute"] = { link = "PreProc" },
  ["@attribute.builtin"] = { ctermfg = semantic_colors.red },

  ["@property"] = { link = "Identifier" },

  ["@function"] = { link = "Function" },
  ["@function.builtin"] = { ctermfg = semantic_colors.red },
  -- ["@function.call"] = {},
  ["@function.macro"] = { link = "Macro" },
  -- ["@function.method"] = {},
  -- ["@function.method.call"] = {},

  ["@constructor"] = { link = "Special" },

  ["@operator"] = { link = "Operator" },

  ["@keyword"] = { link = "Keyword" },
  -- ["@keyword.coroutine"] = {},
  -- ["@keyword.function"] = {},
  -- ["@keyword.operator"] = {},
  -- ["@keyword.import"] = {},
  -- ["@keyword.type"] = {},
  -- ["@keyword.modifier"] = {},
  -- ["@keyword.repeat"] = {},
  -- ["@keyword.return"] = {},
  -- ["@keyword.debug"] = {},
  -- ["@keyword.exception"] = {},
  -- ["@keyword.conditional"] = {},
  -- ["@keyword.conditional.ternary"] = {},
  -- ["@keyword.directive"] = {},
  -- ["@keyword.directive.define"] = {},

  ["@punctuation"] = { link = "Delimiter" },
  -- ["@punctuation.delimeter"] = {},
  -- ["@punctuation.bracket"] = {},
  ["@punctuation.special"] = { link = "Special" },

  ["@comment"] = { link = "Comment" },
  ["@comment.documentation"] = { link = "Comment" },
  ["@comment.error"] = { link = "DiagnosticError" },
  ["@comment.warning"] = { link = "DiagnosticWarn" },
  ["@comment.todo"] = { link = "Todo" },
  ["@comment.note"] = { link = "DiagnosticHint" },

  -- ["@markup"] = { link = "Special" },
  -- ["@markup.strong"] = { bold = true },
  -- ["@markup.italic"] = { italic = true },
  -- ["@markup.strikethrough"] = { strikethrough = true },
  -- ["@markup.underline"] = { underline = true },
  -- ["@markup.heading"] = { link = "Title" },
  -- ["@markup.heading.1"] = {},
  -- ["@markup.heading.2"] = {},
  -- ["@markup.heading.3"] = {},
  -- ["@markup.heading.4"] = {},
  -- ["@markup.heading.5"] = {},
  -- ["@markup.heading.6"] = {},
  -- ["@markup.quote"] = {},
  -- ["@markup.math"] = {},
  -- ["@markup.link"] = { underline = true },
  -- ["@markup.link.label"] = {},
  -- ["@markup.link.url"] = {},
  -- ["@markup.raw"] = {},
  -- ["@markup.raw.block"] = {},
  -- ["@markup.list"] = {},
  -- ["@markup.list.checked"] = {},
  -- ["@markup.list.unchecked"] = {},

  ["@diff.plus"] = { link = "Added" },
  ["@diff.minus"] = { link = "Removed" },
  ["@diff.delta"] = { link = "Changed" },

  ["@tag"] = { link = "Tag" },
  ["@tag.builtin"] = { ctermfg = semantic_colors.red },
  ["@tag.attribute"] = { link = "@attribute" },
  ["@tag.delimiter"] = { link = "Delimiter" },

  -- LSP semantic tokens

  -- ["@lsp.type.class"] = { link = "@type" },
  -- ["@lsp.type.comment"] = { link = "@comment" },
  -- ["@lsp.type.decorator"] = { link = "@attribute" },
  -- ["@lsp.type.enum"] = { link = "@type" },
  -- ["@lsp.type.enumMember"] = { link = "@constant" },
  -- ["@lsp.type.event"] = { link = "@type" },
  -- ["@lsp.type.function"] = { link = "@function" },
  -- ["@lsp.type.interface"] = { link = "@type" },
  -- ["@lsp.type.keyword"] = { link = "@keyword" },
  -- ["@lsp.type.macro"] = { link = "@constant.macro" },
  -- ["@lsp.type.method"] = { link = "@function.method" },
  -- ["@lsp.type.modifier"] = { link = "@type.qualifier" },
  -- ["@lsp.type.namespace"] = { link = "@module" },
  -- ["@lsp.type.number"] = { link = "@number" },
  -- ["@lsp.type.operator"] = { link = "@operator" },
  -- ["@lsp.type.parameter"] = { link = "@variable.parameter" },
  -- ["@lsp.type.property"] = { link = "@property" },
  -- ["@lsp.type.regexp"] = { link = "@string.regexp" },
  -- ["@lsp.type.string"] = { link = "@string" },
  -- ["@lsp.type.struct"] = { link = "@type" },
  -- ["@lsp.type.type"] = { link = "@type" },
  -- ["@lsp.type.typeParameter"] = { link = "@type.definition" },
  -- ["@lsp.type.variable"] = { link = "@variable" },

  -- ["@lsp.mod.abstract"] = {},
  -- ["@lsp.mod.async"] = {},
  -- ["@lsp.mod.declaration"] = {},
  ["@lsp.mod.defaultLibrary"] = { ctermfg = semantic_colors.red },
  -- ["@lsp.mod.definition"] = {},
  -- ["@lsp.mod.deprecated"] = { link = "DiagnosticDeprecated" },
  -- ["@lsp.mod.documentation"] = {},
  -- ["@lsp.mod.modification"] = {},
  -- ["@lsp.mod.readonly"] = {},
  -- ["@lsp.mod.static"] = {},

  -- ["@lsp.typemod.<type>.<mod>"] = {},

  -- Built-in LSP
  LspCodeLens = { link = "NonText" },
  LspCodeLensSeparator = { link = "LspCodeLens" },
  LspInlayHint = { link = "NonText" },
  LspReferenceRead = { link = "LspReferenceText" },
  LspReferenceText = { link = "Visual" },
  LspReferenceWrite = { link = "LspReferenceText" },
  LspSignatureActiveParameter = { link = "Visual" },
}

for group, attributes in pairs(groups) do
  vim.api.nvim_set_hl(0, group, attributes)
end
